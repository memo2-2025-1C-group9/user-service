name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black
        run: |
          cd services/user-auth
          black --check app tests

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: student_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Set up environment
        run: |
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/student_management" >> $GITHUB_ENV

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U user -d student_management; then
              echo "Database is ready"
              break
            fi
            echo "Waiting for database..."
            sleep 5
          done

      - name: Run tests
        run: |
          cd services/user-auth
          pytest tests/ -v --cov=app --cov=tests --cov-report=term-missing --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  update-readme:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | awk '{print $1*100}' | head -n1 | tr -d '\n')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Generate badges
        run: |
          # Generar badge de coverage
          COVERAGE_BADGE="https://img.shields.io/badge/Coverage-${COVERAGE}%25-brightgreen"
          echo "COVERAGE_BADGE=$COVERAGE_BADGE" >> $GITHUB_ENV
          
          # Generar badge de estado del pipeline
          PIPELINE_BADGE="https://img.shields.io/badge/Pipeline-passing-brightgreen"
          echo "PIPELINE_BADGE=$PIPELINE_BADGE" >> $GITHUB_ENV

      - name: Update README with badges
        run: |
          # Actualizar badges en el README
          sed -i "s|!\[Coverage\](.*)|![Coverage](${COVERAGE_BADGE})|" README.md
          sed -i "s|!\[Pipeline\](.*)|![Pipeline](${PIPELINE_BADGE})|" README.md

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          TARGET_BRANCH=${{ github.head_ref || github.ref_name }}
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH
          git add README.md
          git commit -m "Update badges in README" || echo "No changes to commit"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:$TARGET_BRANCH